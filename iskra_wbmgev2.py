import time
from websocket import create_connection # pip install websocket-client

class iskra_wbmgev2:
    def __init__(self,ws_addr=None,timeout:int=1):
        self.ws_addr = ws_addr
        self.timeout = timeout
    def connect(self,sn:str=''):
        self.ws = create_connection(self.ws_addr, timeout=self.timeout)
        data = [0, 0, 0, 0, 0, 0, 0, 0]
        self.ws.send_binary(data)
        time.sleep(0.1)
        data = f'/?{sn}!\r\n'.encode()
        self.ws.send_binary(data)
        Opcode, ret = self.ws.recv_data()
        return ret
    def recv_all_data(self):
        data = b''
        ret = self.ws.recv()
        while len(ret) == 1460:
            data = data + ret
            ret = self.ws.recv()
        data = data + ret
        return data
    def send_binary(self,binary=b'',timeout=None):
        if timeout is not None: self.ws.settimeout(timeout)
        data = binary.encode()
        self.ws.send_binary(data)
        ret = self.recv_all_data()
        #Opcode, ret = self.ws.recv()
        if timeout is not None: self.ws.settimeout(self.timeout)
        return ret
    def close(self):
        data = 'B0q'.encode()
        self.ws.send_binary(data)
        self.ws.close()
    @staticmethod
    def clear_data(text):
        ascii_x = {'00': ' ',
                   '01': '',
                   '02': '',
                   '03': '',
                   '04': '',
                   '05': '',
                   '06': '',
                   '07': '',
                   '0b': '',
                   '0e': '',
                   '0f': '',
                   }
        for k in ascii_x:
            text = text.replace(ascii_x[k], '')
        return text
    @staticmethod
    def data_filter(data_text:str="", fltr:dict={}, debug = False):
        ret = {}
        for code_value in data_text.split('\r\n'):
            if (True if code_value.find('(') != -1 else False) and (True if code_value.find(')') != -1 else False):
                fr = code_value.find('(')
                to = code_value.find(')')
                code = code_value[:fr]
                data = code_value[fr + 1:to]
                if fltr.get(code) is not None:
                    i, t = '', ''
                    _float = False
                    for s in data:
                        o = ord(s)
                        # print('o:',o)
                        if o == 46: _float = True
                        if o >= 46 and o <= 57:
                            i = i + s
                        else:
                            t = t + s
                    value = float(i) if _float else int(i)
                    if debug: print('code: ', code, '\n', 'data: ', data, '\n', ' value: ', value, '\n', ' ediz: ', t,
                                    '\n', sep='')
                    ret.update({code:fltr[code]})
                    ret[code].update({'value': value, 'ediz': t})
        return ret

if __name__ == '__main__':
    debug = False
    if debug: start_time = time.time()
    # –ê–¥—Ä–µ—Å:–ø–æ—Ä—Ç WB-MGEv2 (–ª—é–±–æ–π K3 –ø–æ–¥–æ–±–Ω—ã–π)
    # –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–± –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—ã —Å—á—ë—Ç—á–∏–∫–∞, –¥–ª—è MT831: baudrate=9600(–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ 300, –Ω–∞ –º–æ—ë–º —Å—Ç–æ—è–ª 9600), bytesize=7, parity=PARITY_EVEN, stopbits=1
    ws_addr='ws://10.10.10.10:6432'
    # –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∏—Å–∫—Ä—ã (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ ISKRA MT831)
    sn = '12345678'
    ws = iskra_wbmgev2(ws_addr=ws_addr)
    # –î–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ–º—Å—è –ø–æ–æ–±—â–∞—Ç—Å—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å—á—ë—Ç—á–∏–∫–æ–º.
    ret = ws.connect(sn)
    if debug: print('ws.connect():',ret)
    # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∞–Ω–æ–ª–æ–≥–∏—á–Ω—ã—Ö: MeterView4: [–°—á—ë—Ç—á–∏–∫] => [–ß—Ç–µ–Ω–∏–µ] => [–†–µ–≥–∏—Å—Ç—Ä—ã (–æ–ø—Ä–æ—Å)]
    ret = ws.send_binary(binary='050\r\n', timeout=10)
    if debug: print('ws.send_binary():',ret)
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–µ–Ω–µ–Ω–∏–µ.
    ws.close()
    # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–æ—Ç–∫—Ä—ã—Ç–∏—è, –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ª—Å–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    data = ws.clear_data(ret.decode())
    if debug: print('-=ws.clear_data()=-\n',data)
    # –ß—Ç–æ –º—ã —Ö–æ—Ç–∏–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ {data}.
    # –û–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–æ–≤ –º–æ–∂–Ω–æ –ø–æ–ª—É—á—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ MeterView4: [–°—á—ë—Ç—á–∏–∫] => [–ß—Ç–µ–Ω–∏–µ] => [–†–µ–≥–∏—Å—Ç—Ä—ã (–æ–ø—Ä–æ—Å)]
    get_data = {'15.7.0': {'dis': '–°—É–º–º–∞—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å'},
         '1.8.0': {'dis': 'L123 –¢–µ–∫—É—â–µ–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏+'},
         '2.8.0': {'dis': 'L123 –¢–µ–∫—É—â–µ–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏-'},
         '3.8.0': {'dis': 'L123 –¢–µ–∫—É—â–µ–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏+'},
         '4.8.0': {'dis': 'L123 –¢–µ–∫—É—â–µ–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏-'},
         '9.8.0': {'dis': 'L123 –¢–µ–∫—É—â–µ–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏+'},
         '10.8.0': {'dis': 'L123 –¢–µ–∫—É—â–µ–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏-'},
         '31.7.0': {'dis': 'L1 –¢–æ–∫'},
         '51.7.0': {'dis': 'L2 –¢–æ–∫'},
         '71.7.0': {'dis': 'L3 –¢–æ–∫'},
         '32.7.0': {'dis': 'L1 –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ'},
         '52.7.0': {'dis': 'L2 –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ'},
         '72.7.0': {'dis': 'L3 –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ'},
         '33.7.0': {'dis': 'L1 –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏'},
         '53.7.0': {'dis': 'L2 –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏'},
         '73.7.0': {'dis': 'L3 –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏'},
         '81.7.40': {'dis': 'L1 –§–∞–∑–Ω—ã–π —É–≥–æ–ª'},
         '81.7.51': {'dis': 'L2 –§–∞–∑–Ω—ã–π —É–≥–æ–ª'},
         '81.7.62': {'dis': 'L3 –§–∞–∑–Ω—ã–π —É–≥–æ–ª'},
         '11.7.0': {'dis': 'L123 –¢–æ–∫'},
         '12.7.0': {'dis': 'L123 –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ'},
         '13.7.0': {'dis': 'L123 –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏'},
         }
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–µ–¥—à–∏–µ —Å —Å—á—ë—Ç—á–∏–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ —á—Ç–æ –Ω—É–∂–Ω–æ(—Ç–æ —á—Ç–æ –≤ {get_data})
    # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–∞—Ç—ã —Å—Ä–µ–∑–æ–≤ –∏–ª–∏ –≤—Å—ë –≤ json, –ø—Ä–∞–≤–∏–º data_filter –ø–æ–¥ —Å–µ–±—è.
    data = ws.data_filter(data_text=data, fltr=get_data,debug=debug)
    print('data:',data)
    if debug:
        print('–í—Å—ë –ª–∏ –ø—Ä–∏—à–ª–æ:', len(get_data) == len(data))
        print('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:',time.time()-start_time)
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ zabbix: data = json.dumps(data)
    # –ï—Å–ª–∏ –∫–∏—Ä–∏–ª–∏—Ü–∞ –∏–¥—ë—Ç –ª–µ—Å–æ–º, –µ–Ω–∫–æ–¥–∏–º-–¥–µ–∫–æ–¥–∏–º –∏–∑ —Å–≤–æ–µ–π –≤ –Ω—É–∂–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É.
